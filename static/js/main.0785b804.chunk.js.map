{"version":3,"sources":["Counter.js","reducer.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","increment","props","dispatch","type","decrement","onClick","this","count","Component","connect","state","initialState","reducer","action","App","store","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAGMA,E,4MAEFC,UAAY,WACR,EAAKC,MAAMC,SAAS,CAChBC,KAAO,e,EAIfC,UAAY,WACR,EAAKH,MAAMC,SAAS,CAChBC,KAAO,e,uDAMX,OACA,gCACI,yCACA,gCACI,wBAAQE,QAASC,KAAKN,UAAtB,eACA,+BAAOM,KAAKL,MAAMM,QAClB,wBAAQF,QAASC,KAAKF,UAAtB,yB,GAtBMI,aAmCPC,eANS,SAACC,GACrB,MAAM,CACFH,MAAQG,EAAMH,SAIPE,CAAyBV,G,OCrClCY,EAAe,CACjBJ,MAAQ,GAmBKK,MAhBjB,WAAiD,IAAhCF,EAA+B,uDAAvBC,EAAeE,EAAQ,uCAC5C,OAAQA,EAAOV,MACb,IAAK,YACH,MAAM,CACJI,MAAOG,EAAMH,MAAQ,GAEzB,IAAK,YACH,MAAM,CACJA,MAAOG,EAAMH,MAAQ,GAEzB,QACE,OAAOG,ICGAI,E,4MAXbC,MAAQC,YAAYJ,G,uDAGlB,OACE,cAAC,IAAD,CAAUG,MAAOT,KAAKS,MAAtB,SACE,cAAC,EAAD,U,GAPUP,aCMHS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0785b804.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Counter extends Component {\r\n\r\n    increment = () => {\r\n        this.props.dispatch({\r\n            type : \"INCREMENT\"\r\n        })\r\n    }\r\n\r\n    decrement = () => {\r\n        this.props.dispatch({\r\n            type : \"DECREMENT\"\r\n        })\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n        <div>\r\n            <h1>Counter</h1>\r\n            <div>\r\n                <button onClick={this.increment}>+</button>\r\n                <span>{this.props.count}</span>\r\n                <button onClick={this.decrement}>-</button>\r\n            </div>\r\n        </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        count : state.count\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Counter);","\r\nconst initialState = {\r\n    count : 0\r\n}\r\n\r\nfunction reducer(state = initialState , action) {\r\n    switch (action.type) {\r\n      case \"INCREMENT\":\r\n        return{\r\n          count: state.count + 1\r\n        }\r\n      case \"DECREMENT\":\r\n        return{\r\n          count: state.count - 1\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n\r\n  export default reducer;","import React, { Component } from 'react';\nimport Counter from './Counter';\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nclass App extends Component {\n\n  store = createStore(reducer)\n\n  render () {\n    return (\n      <Provider store={this.store}>\n        <Counter />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}